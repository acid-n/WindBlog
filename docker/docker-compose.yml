version: '3.9'

# Рекомендуется создать .env файл в этой же директории (docker/.env)
# и определить в нем переменные POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, DJANGO_SECRET_KEY и т.д.
# Пример docker/.env:
# POSTGRES_DB=musson_db
# POSTGRES_USER=musson_user
# POSTGRES_PASSWORD=yoursecurepassword
# DJANGO_SECRET_KEY=yourdjangosecretkey
# FRONTEND_API_URL=http://localhost:8000/api/v1 # Для Next.js, если он собирается в Docker

services:
  db:
    image: postgres:15-alpine
    container_name: blog_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-musson_db} # Фоллбэк, если переменная не задана
      POSTGRES_USER: ${POSTGRES_USER:-musson_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-musson_pass} # Этот пароль лучше задать в .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-musson_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: blog_backend
    restart: always
    env_file:
      - .env
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY_BE}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - POSTGRES_DB=${POSTGRES_DB:-musson_db}
      - POSTGRES_USER=${POSTGRES_USER:-musson_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-musson_pass}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - FRONTEND_URL=${FRONTEND_URL_BE:-http://localhost:3000}
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - ../media:/app/media
    depends_on:
      - db
    networks:
      - blog_network
    # Для разработки: запускается runserver с hot-reload (см. Dockerfile.dev)

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
      # Используем режим разработки для прямого запуска Next.js
    container_name: blog_frontend
    restart: always
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL_FE:-http://backend:8000/api/v1}
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/.next
    depends_on:
      - backend
    networks:
      - blog_network
    # Для разработки: запускается npm run dev (см. Dockerfile.dev)

  tests:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: blog_tests
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY_BE:-insecure-test-key}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - POSTGRES_DB=${POSTGRES_DB:-musson_db_test}
      - POSTGRES_USER=${POSTGRES_USER:-musson_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-musson_pass}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    volumes:
      - ../backend:/app
    depends_on:
      db:
        condition: service_healthy
    command: >-
      bash -c "chmod +x ./run_coverage.sh && ./run_coverage.sh"
      
  redis:
    image: redis:7-alpine
    container_name: blog_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  blog_network:
    driver: bridge