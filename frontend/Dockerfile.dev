# DEV Dockerfile for Next.js frontend (optimized for ARM64 and cross-platform)
FROM node:18-alpine AS base

# Устанавливаем необходимые системные зависимости для компиляции нативных модулей
RUN apk add --no-cache python3 make g++ gcc libc6-compat

# Создаем рабочую директорию и настраиваем переменные окружения
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=development

# Создаем стандартную конфигурацию PostCSS с @tailwindcss/postcss
RUN echo 'module.exports = {plugins: {"postcss-nested": {}, "@tailwindcss/postcss": {}, autoprefixer: {}}}' > /tmp/postcss.config.js

# Копирование файлов зависимостей
COPY package.json package-lock.json* ./

# Установка зависимостей
RUN npm ci --omit=optional --no-fund

# Копирование всего кода проекта
COPY . .

# Применяем нашу стандартную конфигурацию PostCSS
RUN cp /tmp/postcss.config.js ./postcss.config.js

# Создаем кэш-директории для Next.js
RUN mkdir -p .next/cache/webpack

# Открываем порт для приложения
EXPOSE 3000

# Запускаем приложение в режиме разработки
CMD ["sh", "-c", "NODE_OPTIONS='--max_old_space_size=4096' npx next dev"]
