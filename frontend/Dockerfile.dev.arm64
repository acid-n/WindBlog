# Многоэтапная сборка для ARM64 архитектуры с решением проблемы lightningcss
# Этап 1: Подготовка зависимостей и компиляция нативных модулей
FROM --platform=linux/arm64 node:18-alpine AS deps

# Установка необходимых системных зависимостей для компиляции
RUN apk add --no-cache python3 make g++ gcc libc6-compat git

WORKDIR /app

# Копирование конфигурационных файлов
COPY package.json package-lock.json* ./
COPY next.config.js ./
COPY postcss.config.js ./
COPY tailwind.config.js ./
COPY tsconfig.json ./

# Установка зависимостей и сборка нативных модулей с явными флагами для ARM64
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=development
ENV npm_config_arch=arm64
ENV npm_config_platform=linux
ENV npm_config_target_arch=arm64
ENV npm_config_target_platform=linux

# Создаем пользовательский postcss.config.js, который не использует lightningcss
RUN echo 'module.exports = {plugins: {"tailwindcss/nesting": {}, tailwindcss: {}, autoprefixer: {}}}' > postcss.config.js

# Создаем пользовательский next.config.js, отключающий проблемные функции
RUN echo 'const nextConfig = require("./next.config.js"); \
module.exports = { \
  ...nextConfig, \
  swcMinify: false, \
  optimizeFonts: false, \
  experimental: { ...nextConfig.experimental, css: false } \
};' > next.config.arm64.js

# Устанавливаем зависимости с особыми настройками для ARM64
RUN npm ci --omit=optional --no-fund --ignore-scripts
RUN npm rebuild --arch=arm64 --platform=linux

# Этап 2: Подготовка исходного кода
FROM --platform=linux/arm64 node:18-alpine AS builder

WORKDIR /app

# Копируем зависимости из предыдущего этапа
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/postcss.config.js ./postcss.config.js
COPY --from=deps /app/next.config.arm64.js ./next.config.js

# Копируем исходный код проекта
COPY . .

# Модифицируем исходный код для отказа от проблемных компонентов

# 1. Создаем модифицированную версию src/app/layout.tsx, которая не использует next/font
RUN mkdir -p /app/src/app-modified
RUN cp -r /app/src/app/* /app/src/app-modified/

# 2. Модифицируем layout.tsx для использования обычных CSS вместо next/font
RUN sed -i 's/import { Inter } from "next\/font\/google";/\/\/ Отключено: import { Inter } from "next\/font\/google";/g' /app/src/app-modified/layout.tsx
RUN sed -i 's/const inter = Inter({ subsets: \["latin"\] });/\/\/ Отключено: const inter = Inter({ subsets: ["latin"] });/g' /app/src/app-modified/layout.tsx
RUN sed -i 's/${inter.className} //g' /app/src/app-modified/layout.tsx

# 3. Создаем fonts.css для стандартного подключения шрифтов через CSS
RUN echo '@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");' > /app/src/app-modified/fonts.css
RUN echo 'body { font-family: "Inter", sans-serif; }' >> /app/src/app-modified/fonts.css

# 4. Добавляем импорт fonts.css в layout.tsx
RUN sed -i '/import ".\/globals.css";/a import ".\/fonts.css";' /app/src/app-modified/layout.tsx

# 5. Перемещаем модифицированные файлы обратно в основную директорию
RUN cp -r /app/src/app-modified/* /app/src/app/

# Этап 3: Запуск приложения
FROM --platform=linux/arm64 node:18-alpine AS runner

WORKDIR /app

ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_IGNORE_REACTROOT=1
ENV NEXT_PRIVATE_IGNORE_LIGHTNINGCSS=1
ENV NEXT_DISABLE_LIGHTNINGCSS=1

# Копируем только необходимые файлы
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/next.config.js ./next.config.js
COPY --from=builder /app/postcss.config.js ./postcss.config.js
COPY --from=builder /app/src ./src
COPY --from=builder /app/tsconfig.json ./tsconfig.json

# Создаем директорию для кэша
RUN mkdir -p .next/cache

# Экспортируем порт для Next.js
EXPOSE 3000

# Запускаем Next.js в режиме разработки с расширенными настройками памяти
CMD ["sh", "-c", "NODE_OPTIONS='--max_old_space_size=4096 --no-warnings' npx next dev"]
