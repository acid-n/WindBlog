# Многоэтапная сборка для решения проблемы с нативными модулями в ARM64
FROM node:18-alpine AS deps

# Устанавливаем зависимости для сборки нативных модулей
RUN apk add --no-cache python3 make g++ libc6-compat

WORKDIR /app

# Копируем только package.json для установки зависимостей
COPY package.json package-lock.json* ./

# Устанавливаем зависимости, исключая проблемный lightningcss
RUN npm install --omit=dev --legacy-peer-deps

# Второй этап - базовый образ с настроенной средой
FROM node:18-alpine AS runner
WORKDIR /app

# Отключаем все, что связано с lightningcss
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_IGNORE_REACTROOT=1
ENV NEXT_PRIVATE_IGNORE_LIGHTNINGCSS=1
ENV NEXT_PRIVATE_STANDALONE=1
ENV NEXT_DISABLE_LIGHTNINGCSS=1

# Копируем необходимые файлы
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Создаем файлы для обхода проблемы с CSS
RUN echo "module.exports = {plugins: {autoprefixer: {}}}" > postcss.config.js
RUN mkdir -p .next/cache

# Удаляем lightningcss, если он остался
RUN rm -rf node_modules/lightningcss || true

# Создаем временную директорию и простую HTML-страницу
RUN mkdir -p /app/public
RUN mkdir -p /app/temp
RUN echo '<html><head><title>WindBlog - В процессе загрузки</title><style>body { font-family: Arial; padding: 50px; text-align: center; }</style></head><body><h1>WindBlog</h1><p>Фронтенд приложение сейчас находится в процессе сборки.</p><p>Бэкенд API доступен по адресу <a href="http://localhost:8000/api/v1/">http://localhost:8000/api/v1/</a></p></body></html>' > /app/temp/index.html

EXPOSE 3000

# Запускаем простой HTTP-сервер для временной страницы
CMD ["sh", "-c", "cd /app/temp && npm install -g http-server && http-server -p 3000"]
