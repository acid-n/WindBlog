# Универсальный Dockerfile для запуска Next.js с SSR на ARM64
# Корректный запуск с обходом проблем нативных модулей

# Этап 1: Установка зависимостей
FROM node:18-alpine AS deps
WORKDIR /app

# Установка системных зависимостей для сборки нативных модулей
RUN apk add --no-cache python3 make g++ libc6-compat bash

# Копирование файлов зависимостей
COPY package.json package-lock.json* ./
COPY ./noop-module.js ./

# Установка зависимостей
RUN npm ci

# Этап 2: Сборка приложения Next.js
FROM node:18-alpine AS builder
WORKDIR /app

# Переменные среды для отключения проблемных функций
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NEXT_PRIVATE_IGNORE_LIGHTNINGCSS=1
ENV NEXT_DISABLE_LIGHTNINGCSS=1

# Копирование всех файлов приложения
COPY . .
COPY --from=deps /app/node_modules ./node_modules

# Создаем специальную конфигурацию для ARM64
RUN cat > next.config.js << 'EOL'
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['localhost'],
    remotePatterns: [
      // Для локальной разработки
      {
        protocol: "http",
        hostname: "localhost",
        port: "8000",
        pathname: "/**",
      },
      {
        protocol: "http",
        hostname: "127.0.0.1",
        port: "8000",
        pathname: "/media/**",
      },
      // Для работы внутри Docker (SSR и клиент)
      {
        protocol: "http",
        hostname: "backend",
        port: "8000",
        pathname: "/media/**",
      },
    ],
  },
  // Перенаправление API-запросов на бэкенд
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://backend:8000/api/:path*',
      },
      {
        source: '/media/:path*',
        destination: 'http://backend:8000/media/:path*',
      },
    ];
  },
  
  // Отключаем проблемные оптимизации
  swcMinify: false,
  optimizeFonts: false,
  
  // Отключаем функционал, требующий nativeModules
  experimental: {
    serverActions: false,
    serverComponentsExternalPackages: [],
    optimizeCss: false,
    forceSwcTransforms: false,
  },
  
  // Переопределение загрузчиков webpack для отключения проблемных модулей
  webpack: (config, { isServer, dev }) => {
    // Добавляем alias для проблемных модулей
    config.resolve.alias = {
      ...config.resolve.alias,
      // Отключаем lightningcss путем замены его на заглушку
      'lightningcss': require.resolve('./noop-module.js'),
    };
    
    return config;
  },
};

module.exports = nextConfig;
EOL

# Создаем универсальную заглушку для нативных модулей
RUN cat > noop-module.js << 'EOL'
/**
 * Универсальная заглушка для нативных модулей
 */
const noopHandler = {
  get: (target, prop) => {
    if (typeof prop === 'string') {
      return (...args) => {
        if (['transform', 'bundle', 'compile'].includes(prop)) {
          return { code: '', map: null, warnings: [] };
        }
        return {};
      };
    }
    return undefined;
  }
};
module.exports = new Proxy({}, noopHandler);
EOL

# Настраиваем PostCSS
RUN cat > postcss.config.js << 'EOL'
module.exports = {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
};
EOL

# Сборка приложения
RUN npm run build

# Этап 3: Запуск приложения
FROM node:18-alpine AS runner
WORKDIR /app

# Переменные среды для продакшена
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_PRIVATE_IGNORE_LIGHTNINGCSS=1
ENV NEXT_DISABLE_LIGHTNINGCSS=1

# Копируем только необходимые файлы для запуска
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/noop-module.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Экспозиция порта
EXPOSE 3000

# Запуск Next.js в режиме продакшена
CMD ["npm", "run", "start"]
