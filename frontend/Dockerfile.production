# Multi-stage build для оптимизированной сборки Next.js на ARM64
FROM --platform=linux/arm64 node:18-alpine AS deps

# Установка зависимостей для сборки нативных модулей
WORKDIR /app
RUN apk add --no-cache python3 make g++ libc6-compat

# Копирование файлов зависимостей
COPY package.json package-lock.json* ./

# Установка зависимостей с оптимизациями для production
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm ci --omit=dev

# Stage 2: Сборка приложения
FROM --platform=linux/arm64 node:18-alpine AS builder
WORKDIR /app

# Отключаем телеметрию и проблемные модули
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV NEXT_PRIVATE_IGNORE_LIGHTNINGCSS=1
ENV NEXT_DISABLE_LIGHTNINGCSS=1

# Копируем зависимости из предыдущего этапа
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Создаем кастомную конфигурацию для сборки без проблемных модулей
RUN echo 'module.exports = {reactStrictMode: true, swcMinify: false, output: "export", images: {unoptimized: true}, experimental: {css: false}};' > next.config.js
RUN echo 'module.exports = {plugins: {"tailwindcss/nesting": {}, tailwindcss: {}, autoprefixer: {}}}' > postcss.config.js

# Если fonts.css еще не существует, создаем его
RUN mkdir -p ./src/app
RUN if [ ! -f ./src/app/fonts.css ]; then \
    echo '@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");' > ./src/app/fonts.css; \
    echo 'body { font-family: "Inter", sans-serif; }' >> ./src/app/fonts.css; \
fi

# Сборка статического сайта
RUN npm run build

# Stage 3: Запуск с nginx
FROM --platform=linux/arm64 nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Копируем статические файлы из builder
COPY --from=builder /app/out ./

# Копируем конфигурацию nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Экспортируем порт
EXPOSE 3000

# Запускаем nginx
CMD ["nginx", "-g", "daemon off;"]
