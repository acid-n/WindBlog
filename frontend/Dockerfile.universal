# Универсальный Dockerfile для фронтенда на базе Next.js
# Работает на любой архитектуре, включая ARM64
# Использует многоэтапную сборку для оптимизации размера образа

# Этап 1: Установка зависимостей
FROM node:18-alpine AS deps
WORKDIR /app

# Установка системных зависимостей
RUN apk add --no-cache python3 make g++ libc6-compat bash

# Копирование файлов зависимостей
COPY package.json package-lock.json* ./

# Установка зависимостей
RUN npm ci

# Этап 2: Сборка приложения
FROM node:18-alpine AS builder
WORKDIR /app

# Переменные среды для отключения телеметрии и проблемных функций
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NEXT_PRIVATE_IGNORE_LIGHTNINGCSS=1
ENV NEXT_DISABLE_LIGHTNINGCSS=1

# Копирование зависимостей с предыдущего этапа
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Делаем скрипт сборки исполняемым
RUN chmod +x ./scripts/universal-build.sh

# Запускаем универсальный скрипт сборки
RUN ./scripts/universal-build.sh

# Этап 3: Запуск с Nginx
FROM nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Копирование статических файлов из этапа сборки
COPY --from=builder /app/out ./

# Копирование конфигурации Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Экспозиция порта
EXPOSE 3000

# Запуск Nginx
CMD ["nginx", "-g", "daemon off;"]
